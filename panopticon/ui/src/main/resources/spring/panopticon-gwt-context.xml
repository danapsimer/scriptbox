<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:conditional="http://lrd.com/spring/conditional"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://lrd.com/spring/conditional http://lrd.com/spring/conditional.xsd">
          
  	<context:component-scan base-package="org.scriptbox" />

  	<bean id="annotationServiceLocator" class="org.scriptbox.util.gwt.server.remote.locator.AnnotationServiceLocator"/>
  
  	<bean id="configurer" class="org.scriptbox.util.spring.context.EvalConfigurer"> 
    	<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
  	</bean>

  	<bean name="clusterFactory" class="org.scriptbox.util.cassandra.CassandraClusterFactory"
                p:name="Test Cluster"
                p:host="localhost"
                p:port="9160" />
    <bean name="cluster"
        factory-bean="clusterFactory"
        factory-method="getInstance" />    
    <bean name="keyspaceFactory" class="org.scriptbox.util.cassandra.CassandraKeyspaceFactory"
        p:cluster-ref="cluster" />
    <bean name="keyspace" class="me.prettyprint.hector.api.Keyspace"
        factory-bean="keyspaceFactory"
        factory-method="getInstance">      
            <constructor-arg value="Metrics" />
    </bean>

    <bean name="store" class="org.scriptbox.metrics.cassandra.CassandraMetricStore"
    	p:cluster-ref="cluster"
    	p:keyspace-ref="keyspace" />
    	
    	
    <bean id="serviceAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
    	<constructor-arg type="org.springframework.aop.Pointcut" >
         	<bean id="servicePointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut" >
            	<constructor-arg value="org.springframework.stereotype.Service" />
            	<constructor-arg value="true" />
         	</bean>
    	</constructor-arg>
    	<constructor-arg type="org.aopalliance.aop.Advice">
        	<ref bean="gwtInterceptor" />
    	</constructor-arg>
	</bean>

	<bean id="repositoryAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
    	<constructor-arg type="org.springframework.aop.Pointcut" >
         	<bean id="repositoryPointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut" >
            	<constructor-arg value="org.springframework.stereotype.Repository" />
	            <!-- 
	                EXTREMELY important to set AnnotationMatchingPointcut.checkInherited == true because the cglib proxy with create a subclass
	                that has the @Transactional attribute (making the transaction interceptor work but this interceptor will mysteriously
	                not work because the proxy does not have the @Repository annotation.
	                The serviceAdvisor still seemed to work without this for some reason. Likely, it wasn't using cglib in that case but
	                that's just a guess.
	             -->
	            <constructor-arg value="true" />
	         </bean>
	    </constructor-arg>
	    <constructor-arg type="org.aopalliance.aop.Advice">
	        <ref bean="gwtInterceptor" />
	    </constructor-arg>
	</bean>

	<!-- 
	<bean id="springAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
	    <constructor-arg type="org.springframework.aop.Pointcut" >
	         <bean id="springPointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut" >
	            <constructor-arg value="org.joule.spring.SpringInterceptors" />
	            <constructor-arg value="true" />
	         </bean>
	    </constructor-arg>
	    <constructor-arg type="org.aopalliance.aop.Advice">
	        <ref bean="gwtInterceptor" />
	    </constructor-arg>
	</bean>
	-->
	
	<bean id="gwtInterceptor" class="org.scriptbox.util.gwt.server.remote.ServiceExceptionInterceptor" />
	    	
</beans>
